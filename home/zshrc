# Lines configured by zsh-newuser-install
HISTFILE=~/.histfile
HISTSIZE=10000
SAVEHIST=10000
setopt rmstarsilent
setopt extended_history
setopt hist_ignore_all_dups
setopt hist_ignore_space
#setopt share_history
setopt autocd
setopt PROMPT_SUBST
setopt RM_STAR_WAIT
#setopt autopushd
unsetopt beep
bindkey -v
# End of lines configured by zsh-newuser-install
# The following lines were added by compinstall
zstyle :compinstall filename '/home/dick/.zshrc'

autoload -Uz compinit
compinit
# End of lines added by compinstall

# key bindings
bindkey "\e[1~" beginning-of-line
bindkey "\e[4~" end-of-line
bindkey "\e[5~" beginning-of-history
bindkey "\e[6~" end-of-history
bindkey "\e[3~" delete-char
bindkey "\e[2~" quoted-insert
bindkey "\e[5C" forward-word
bindkey "\eOc" emacs-forward-word
bindkey "\e[5D" backward-word
bindkey "\eOd" emacs-backward-word
bindkey "\ee[C" forward-word
bindkey "\ee[D" backward-word
bindkey "^H" backward-delete-word
bindkey '^R' history-incremental-search-backward
# for rxvt
bindkey "\e[8~" end-of-line
bindkey "\e[7~" beginning-of-line
# for non RH/Debian xterm, can't hurt for RH/DEbian xterm
bindkey "\eOH" beginning-of-line
bindkey "\eOF" end-of-line
# for freebsd console
bindkey "\e[H" beginning-of-line
bindkey "\e[F" end-of-line
# completion in the middle of a line
bindkey '^i' expand-or-complete-prefix
# stupid debian
bindkey -M viins "\e[A" up-line-or-history
bindkey -M viins "\e[B" down-line-or-history
bindkey -M viins "\eOA" up-line-or-history
bindkey -M viins "\eOB" down-line-or-history

########## DICK'S SUPER AWESOME ZSHRC OF SUPER DUPER SPECTACULARITY ##########

##### OSX SPECIFIC OPTIONS ###################################################
if [[ $HOME == /Users/* ]]; then

    export LC_ALL=en_US.UTF-8
    alias ls='gls --color=auto'
    alias sed='gsed'
    eval $(gdircolors -b ~/.dir_colors)

###### ARCH SPECIFIC OPTIONS ##################################################
else

    eval $(dircolors -b ~/.dir_colors)
    alias ls='ls --color=auto'

fi
###### ARCHITECTURE INDEPENDENT ###############################################

function parse_git_branch {
    git branch --no-color 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/(\1)/'
}
alias gd='git diff'
alias gs='git status'
alias gcom='git commit -m'
alias gcam='git commit --amend'
alias gp='git push'
alias gl='git pull'
alias gco='git checkout'
alias ss='source ~/.zshrc'
alias :q=exit
alias enode='source .env && node'
export EDITOR=vim
export DISPLAY=:0
autoload -U colors && colors
PROMPT='%B%F{red}%m%F{white}:%F{blue}%c%b%F{green}$(parse_git_branch)%f • '
RPROMPT='%F{white}%*%f'

function newpy() {
    if [[ ! -f "$1" ]]; then
        cp ~/.vim/default.py "$1"
    fi
    vim "+call cursor(4, 4)" $1
}
function react() {
    if [[ ! -f "$1" ]]; then
      cp ~/.vim/default_react.coffee "$1"
    fi
    vim "+call cursor(4,24)" $1
}
function h2d() {
    printf "%d\n" "0x$1"
}
function d2h() {
    printf "%x\n" "$1"
}
function up() {
    for ((i = 0; i < $1; i += 1)); do
        cd ..
    done
}
#function chpwd() {
#    emulate -L zsh
#    ls
#}
function guest() {
    setxkbmap us && xmodmap -e "pointer = default"
}
function me() {
    setxkbmap us -variant colemak && xmodmap ~/.Xmodmap
}
function line() {
    head -n $1 $2 | tail -n 1
}
function dcp() {
    mkdir -p `dirname $2` && cp -n "$1" "$2";
}


#alias nn='popd && ls'
alias curl='curl -w "\n"'
alias ta='tmux attach'
alias lc='tmux list-clients'
alias watch='watch --interval=.5 '
alias yc='links news.ycombinator.com'
alias md='mkdir'
alias tweet='t update $1'
alias ds='du -h -d0'
alias goom='goomwwm -cli -restart'
alias o='xdg-open'
alias ag='ag -i --path-to-ignore ~/.agignore'
#alias n='vim ~/Dropbox/notes'
alias rmf='rm -rf'
alias nfix='printf "\e[?1004l"'
alias rmi='rm -r ./node_modules && yarn install'
alias rios='react-native run-ios && react-native log-ios'
alias randroid='react-native run-android && react-native log-android'
alias please="sudo"

function set-cluster() {
  gcloud container clusters get-credentials $1
  gcloud config set container/cluster $1
}

function egg() {
  gcloud auth login
  gcloud auth application-default login
  gcloud config set project prize-egg
  gcloud config set compute/zone us-central1-a
  set-cluster egg-1
}

function dave() {
  gcloud auth login
  gcloud auth application-default login
  gcloud config set project dave-173321
  gcloud config set compute/zone us-central1-b
  set-cluster dave-api-v2
}

#PS1="\[\e[01;31m\]┌─[\[\e[01;35m\u\e[01;31m\]]──[\[\e[00;37m\]${HOSTNAME%%.*}\[\e[01;32m\]]:\w$\[\e[01;31m\]\n\[\e[01;31m\]└──\[\e[01;36m\]>>\[\e[0m\]"
#export PS1="\\w\$(__git_ps1 '(%s)') \$ "
export TERM=rxvt
if which rbenv > /dev/null; then eval "$(rbenv init -)"; fi
stty start undef stop undef

export PATH=./node_modules/.bin:$PATH

PATH=$PATH:$HOME/.rvm/bin # Add RVM to PATH for scripting
PATH=$PATH:/usr/local/sbin # add sbin to path for rabbit
PATH=$PATH:$HOME/bin

. $HOME/.z.sh/z.sh

function vers() {
  grep "\"version\"" package.json | head -n 1 | sed "s/\(^.*version\": \"\)\(.*\)\(\",$\)/\2/"
}

function release() {
  hub release create v$(vers)
}

test -e ${HOME}/.iterm2_shell_integration.zsh && source ${HOME}/.iterm2_shell_integration.zsh

function hn() {
  if [[ -a Dockerfile ]]; then
    nvers=$(head -n 1 Dockerfile | grep node | sed "s/^FROM node:\(.*\)$/\1/")
    if [[ -n nvers ]]; then
      echo "Using $nvers"
      $(n $nvers)
    fi
  fi
}

function secret() {
  echo -n "$1" | base64 | tr -d '\n' | pbcopy
}

function unsecret() {
  echo -n "$1" | base64 -D
}

function restart() {
  kubectl delete pods $(kubectl get pods --no-headers --selector=run=$1 | awk '{print $1}')
}

# React native requirements
export ANDROID_HOME=~/Library/Android/sdk
export ANDROID_NDK=~/Downloads/android-ndk-r10e
export PATH=$PATH:$ANDROID_HOME/tools
export PATH=$PATH:$ANDROID_HOME/platform-tools
export PATH=$PATH:$ANDROID_NDK
export PATH=$PATH:$(yarn global bin)


#if [[ -a /usr/local/bin/virtualenvwrapper.sh ]]; then
#  source /usr/local/bin/virtualenvwrapper.sh
#fi

# The next line updates PATH for the Google Cloud SDK.
if [ -f '/Users/dickfickling/Downloads/google-cloud-sdk/path.zsh.inc' ]; then source '/Users/dickfickling/Downloads/google-cloud-sdk/path.zsh.inc'; fi

# The next line enables shell command completion for gcloud.
if [ -f '/Users/dickfickling/Downloads/google-cloud-sdk/completion.zsh.inc' ]; then source '/Users/dickfickling/Downloads/google-cloud-sdk/completion.zsh.inc'; fi

alias vim=code