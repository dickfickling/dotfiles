"set nocompatible
"set background=light
set background=dark
set backup
set backupdir=~/.vim/tmp
set directory=~/.vim/tmp
"set ttimeoutlen=100
set relativenumber
set undofile
set undodir=~/.vim/tmp
set ignorecase
set smartcase
set gdefault
set backspace=indent,eol,start
set splitright
set splitbelow
set ruler
set pastetoggle=<F2>
set wildignore+=**/node_modules/*
set wildignore+=**env/*
set wildignore+=**ios/build/*
set wildignore+=**ios/Pods/*
set wildignore+=**/*.svg
set wildignore+=**/*.jpg
set wildignore+=**/*.png
set wildignore+=**/*.pyc
set wildignore+=**android/app/build/*
map <F3> :NERDTreeToggle<CR>
let NERDTreeShowLineNumbers=1
map <S-Right> :tabn<CR>
map <S-Left> :tabp<CR>
set wildmode=longest,list,full
set wildmenu


syntax on
"colorscheme solarized
set expandtab
set tabstop=2
set shiftwidth=2
if has('mouse')
  set mouse=a
endif

if has("mouse_sgr")
  set ttymouse=sgr
else
  set ttymouse=xterm2
end
filetype plugin indent on
map <CR> o<Esc>
map! <F7> <ESC> :wq <Enter>
map <F7> :wq <Enter>
command Wq wq
nnoremap <F5> :w ! ./%<Enter>
 " When editing a file, always jump to the last known cursor position.
 " Don't do it when the position is invalid or when inside an event
 " handler
 " (happens when dropping a file on gvim).
autocmd BufReadPost *
 \ if line("'\"") > 0 && line("'\"") <= line("$") |
 \   exe "normal! g`\"" |
 \ endif
map OA <Up>
map OB <Down>
map OD <Left>
map OC <Right>
let g:CommandTHighlightColor='Pmenu'
execute pathogen#infect()

autocmd VimEnter * NERDTree
autocmd VimEnter * wincmd w

" Quit if nerdtree is last buffer
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTreeType") && b:NERDTreeType == "primary") | q | endif


function VReact(name)
  exec "!mkdir -p `dirname " a:name "` && cp -n  ~/.vim/default-react.js" a:name
  exec "vsplit" a:name
  call cursor(7,22)
endfunction

command! -n=1 -complete=file VReact call VReact(<f-args>)

iabbrev cl console.log

let g:jsx_ext_required = 0

nmap <Leader>a: :Tabularize /:/l0l1<CR>
vmap <Leader>a: :Tabularize /:/l0l1<CR>

nmap <Leader>at :CommandTFlush<CR>
vmap <Leader>at :CommandTFlush<CR>

nmap RR :e %<CR>


" Syntastic
"set statusline+=%#warningmsg#
"set statusline+=%{SyntasticStatuslineFlag()}
"set statusline+=%*
"
"let g:syntastic_always_populate_loc_list = 1
"let g:syntastic_loc_list_height = 5
"let g:syntastic_auto_loc_list = 0
"let g:syntastic_javascript_checkers = ['eslint']
"
"let g:syntastic_error_symbol = 'x'
"let g:syntastic_style_error_symbol = '!?'
"let g:syntastic_warning_symbol = '!'
"let g:syntastic_style_warning_symbol = '?'
"
"highlight link SyntasticErrorSign SignColumn
"highlight link SyntasticWarningSign SignColumn
"highlight link SyntasticStyleErrorSign SignColumn
"highlight link SyntasticStyleWarningSign SignColumn
"
"
"nmap <Leader>as :SyntasticCheck<CR>
"vmap <Leader>as :SyntasticCheck<CR>

noremap <PageUp> <NOP>
noremap <PageDown> <NOP>
inoremap <PageUp> <NOP>
inoremap <PageDown> <NOP>
